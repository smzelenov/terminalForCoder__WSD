diff --git a/bash/README.md b/bash/README.md
index df53c7c..32fec97 100644
--- a/bash/README.md
+++ b/bash/README.md
@@ -8,23 +8,27 @@ Every time you launch a terminal, it starts to run the shell - a special program
 ```
 
 ### Basics
+The beginning of any script in bash
+
 ```bash
-  #!/bin/bash # the beginning of any script on bash
+  #!/bin/bash
 ```
 
 #### Variables
-  - **name**: letters, numbers, _ (underscore).
+  - **name**: letters, numbers, `_` (underscore).
   - **name** - it cannot start with a number.
   - **value**: numbers, strings (if there is any whitespace - wrap it into double quotes), characters.
 
 **Create (rewrite) variable:**
+
 ```bash
   path=~/Docs
 ```
 
 **Read variable:**
+
 ```bash
-  $path или ${path}
+  "$path" или "${path}"
 ```
 
 **Pass arguments to a script:**
@@ -33,40 +37,46 @@ Every time you launch a terminal, it starts to run the shell - a special program
 ```
 
 **Processing arguments within the script:**
+
 ```bash
-  $1 # first argument
-  $2 # second argument
-  $0 # name of script
-  $# # count of arguments
+  "$1" # first argument
+  "$2" # second argument
+  "$0" # name of script
+  "$#" # count of arguments
+  "$@" # all arguments is concatenated in one string,
+       # each argument is represented as one word
 ```
 
 **Hello, world!** `*`
+
 ```bash
   #!/bin/bash
   echo "Hello, world!"
 
-  ./hw.sh # how it calls
+  # ./hw.sh - how this script should be called
 ```
 
 **Another one example of working with variables:**
+
 ```bash
   #!/bin/bash
 
-  var1=$1
-  var2=$2
+  var1="$1"
+  var2="$2"
 
-  echo "Arguments are \$1=$var1 \$2=$var2"
+  echo "Arguments are \$1=${var1} \$2=${var2}"
 
-  ./variables.sh var1 var2 # how it calls
+  # ./variables.sh Hello world - how this script should be called
 ```
 > `*` Edit a permit for a file:
 ```bash
-  chmod +x filename.sh
+  chmod +x <filename>
 ```
 
 #### Conditions to execute different branches of code
 
 **if**
+
 ```bash
   if [[ condition ]]
   then
@@ -76,6 +86,7 @@ Every time you launch a terminal, it starts to run the shell - a special program
 
 * * *
 **Conditions (strings):**
+
 ```bash
   -z <string> # string is empty
   -n <string> # string is not empty
@@ -84,6 +95,7 @@ Every time you launch a terminal, it starts to run the shell - a special program
 ```
 
 **Conditions (numbers/strings):**
+
 ```bash
   <numbers/strings> operation <numbers/strings>
   -eq, (==) # equal
@@ -95,6 +107,7 @@ Every time you launch a terminal, it starts to run the shell - a special program
 ```
 
 **Conditions (files):**
+
 ```bash
   -e <path> # path is exist
   -f <path> # is file
@@ -104,6 +117,7 @@ Every time you launch a terminal, it starts to run the shell - a special program
 ```
 
 **Conditions (boolean):**
+
 ```bash
   ! # denial of boolean expression
   && # boolean "and"
@@ -112,6 +126,7 @@ Every time you launch a terminal, it starts to run the shell - a special program
 * * *
 
 **if/else:**
+
 ```bash
   if [[ condition ]]
   then
@@ -119,85 +134,97 @@ Every time you launch a terminal, it starts to run the shell - a special program
   else
     # action, if condition is false
   fi
+
+  break # break loop
+  continue # go to the next value of i
 ```
 
 **if/elif/else**
+
 ```bash
   #!/bin/bash
 
-  if [[ -f $1 ]]
+  if [[ -f "$1" ]]
   then
     echo "Removing file"
-    rm $1
-  elif [[ -d $1 ]]
+    rm "$1"
+  elif [[ -d "$1" ]]
   then
     echo "Removing dir"
-    rm -r $1
+    rm -r "$1"
   else
-    echo "Can't remove $1"
+    echo "Can't remove ${1}"
   fi
 ```
 
 
 **case/in/esac**
+
 ```bash
   #!/bin/bash
 
-  if [[ $# -ne 2 ]]
+  # ./case_in_esac.sh 2 1
+  # Creating dir 1
+  # ./case_in_esac.sh 1 2
+  # Creating file 2
+
+  if [[ "$#" -ne 2 ]]
   then
-   echo "You should specify exactly two arguments!"
+    echo "You should specify exactly two arguments!"
   else
-   case $1 in
-    1)
-     echo "Creating file $2"
-     touch $2
-    ;;
-    2)
-     echo "Creating dir $2"
-     mkdir $2
-    ;;
-    *)
-     echo "Wrong value"
-   esac
+    case "$1" in
+      1)
+        echo "Creating file ${2}"
+        touch "$2"
+      ;;
+      2)
+        echo "Creating dir ${2}"
+        mkdir "$2"
+      ;;
+      *)
+        echo "Wrong value"
+      ;;
+  esac
   fi
 ```
 
 #### Loops for repeated code
 
 **for/in**
+
 ```bash
   for i in array
   do
     # an action, i on every iteration is getting
     # the next value from array
   done
-
-  break # break loop
-  continue # go to the next value of i
 ```
 
 **while**
+
 ```bash
-  while [[ condition ]]
+  while [ condition ]
   do
     # an action, while condition is true
   done
 ```
 
 **while example:**
+
 ```bash
-  # while.sh
   #!/bin/bash
+  # while.sh
 
   again="yes"
+
   while [ "$again" = "yes" ]
   do
-   echo "Please enter a name:"
- >  read name
-   echo "The name you entered is $name"
+    echo "Please enter a name:"
+    read name # !!!
+    echo "The name you entered is ${name}"
 
-   echo "Do you wish to continue? (yes/no)"
-   read again
+    echo "Do you wish to continue? (yes/no)"
+    read again # !!!
   done
 ```
 
@@ -205,10 +232,10 @@ Every time you launch a terminal, it starts to run the shell - a special program
 
 #### Fast diff
 ```bash
-  git diff origin/master origin/%branch-name% > ~/%path_to_directory%/diff/diff-%branch-name%.diff
+  git diff origin/master origin/<branch-name> > ~/<path_to_directory>/diff/diff-<branch-name>.diff
 
-  %branch-name% # name of the branch to which you want to create a diff
-  %path_to_directory% # the name of the folder where to save the file with diff
+  <branch-name> # a name of the branch to which you want to create a diff
+  <path_to_directory> # a name of the folder where to save the file with diff
 ```
 
 #### Fast diff + `Jira API`
@@ -227,14 +254,14 @@ Every time you launch a terminal, it starts to run the shell - a special program
   # Get the first line of git remote output and cut a path to repository
   repository=$(git remote -v | head -n1 | sed "s/^origin.*\/\(.*\)\.git\s(.*)/\1/")
 
-  path_to_diff="$HOME/<path_to_diff_directory>$branch-$repository.diff"
+  path_to_diff="${HOME}/<path_to_diff_directory>${branch}-${repository}.diff"
 
   diff_live () {
-    git diff "origin/live..master/$branch" > "$path_to_diff"
+    git diff "origin/live..master/${branch}" > "$path_to_diff"
   }
 
   attach_diff () {
-    curl -D- -u "<ipa_username>":"<ipa_password>" -X POST -H "X-Atlassian-Token: no-check" -F "file=@$path_to_diff;type=text/x-diff" "https://jira.<project_name>.com/rest/api/2/issue/$issue_id/attachments"
+    curl -D- -u "<ipa_username>":"<ipa_password>" -X POST -H "X-Atlassian-Token: no-check" -F "file=@${path_to_diff};type=text/x-diff" "https://jira.<project_name>.com/rest/api/2/issue/${issue_id}/attachments"
   }
 
   diff_live && attach_diff
@@ -246,7 +273,7 @@ Every time you launch a terminal, it starts to run the shell - a special program
 
 #### Up a large number of repositories
 
-:bangbang: Before start working with `./scripting/up_repo.sh` run `./clone_vendors.sh` :bangbang:
+:bangbang: Before start working with `./scripting/up_repo.sh` you need to run `./clone_vendors.sh` :bangbang:
 
 ```bash
   #!/bin/bash
@@ -260,12 +287,12 @@ Every time you launch a terminal, it starts to run the shell - a special program
   # get list of repositories
   findRepo() {
     REPO_NAME="terminalForCoder__WSD"
-    path_to_vendor_repo="$HOME/$REPO_NAME/bash/core/vendors/"
+    path_to_vendor_repo="${HOME}/${REPO_NAME}/bash/core/vendors/"
     # find all git repositories in $path_to_vendor_repo
     # filter by /.git
-    r=$(find $path_to_vendor_repo -name .git | xargs | sed "s/\\/.git//g")
+    r=$(find ${path_to_vendor_repo} -name .git | xargs | sed "s/\\/.git//g")
     # do check repositories stuff
-    checkBranch $r
+    checkBranch "$r"
   }
 
   # do check repositories stuff
@@ -273,28 +300,28 @@ Every time you launch a terminal, it starts to run the shell - a special program
     BRANCH="master"
 
     # $i is item in $r
-    for i in $@
+    for i in "$@"
     do
       # get current branch name
-      b=`cd $i && git branch | grep \*`
-      echo "repo: $i"
-      echo "current brunch: $b"
+      b=`cd ${i} && git branch | grep \*`
+      echo "repo: ${i}"
+      echo "current brunch: ${b}"
 
       # check branch
-      if [[ $b != "* master" ]]
+      if [[ "$b" != "* master" ]]
       then
-        echo "!Error! $i is not on $BRANCH branch"
-        echo "Current branch is $b"
-        cd $i && git checkout $BRANCH && git branch && git pull origin $BRANCH
+        echo "!Error! ${i} is not on ${BRANCH} branch"
+        echo "Current branch is ${b}"
+        cd "$i" && git checkout "$BRANCH" && git branch && git pull origin "$BRANCH"
       else
         echo "Do pull stuff"
-        cd $i && git branch && git pull origin $BRANCH
+        cd "$i" && git branch && git pull origin "$BRANCH"
       fi
     done
     echo "Done. Congratulation, you win!"
   }
 
-  findRepo $@
+  findRepo "$@"
 ```
 
 #### Helpful aliases
diff --git a/bash/clone_vendors.sh b/bash/clone_vendors.sh
index a70cd65..256c81a 100755
--- a/bash/clone_vendors.sh
+++ b/bash/clone_vendors.sh
@@ -1,7 +1,7 @@
 #!/bin/bash
 # clone vendors repositories to ./core/vendors
 REPO_NAME="terminalForCoder__WSD"
-PATH_TO_CORE="$HOME/$REPO_NAME/bash/core"
+PATH_TO_CORE="${HOME}/${REPO_NAME}/bash/core"
 
 # array with repositories
 repositories=( "https://github.com/larscmagnusson/CSS3MultiColumn.git" "https://github.com/tc39/test262.git" "https://github.com/postcss/postcss" "https://github.com/webpack/webpack" "https://github.com/var-bin/spriteFactory.git" "https://github.com/var-bin/backbone-training.git" "https://github.com/var-bin/flex-grid-framework.git" "https://github.com/var-bin/BrandButtons.git" "https://github.com/var-bin/less-easings.git" )
@@ -10,32 +10,31 @@ i=0 # start el
 repositories_count=${#repositories[@]} # array size
 
 cloneVendors() {
-  if [[ ! -d "$PATH_TO_CORE/vendors" ]]
+  if [[ ! -d "${PATH_TO_CORE}/vendors" ]]
   then
-    mkdir "$PATH_TO_CORE/vendors"
+    mkdir "${PATH_TO_CORE}/vendors"
   fi
 
-  while [ $i -lt $repositories_count ]
+  while [ "$i" -lt "$repositories_count" ]
   do
     # Get vendor name
     vendor=$(echo ${repositories[$i]} | sed "s/https\:\/\/github\.com\/*//g" | sed "s/\/.*//g")
-    vendor_repo_name=$(echo ${repositories[$i]} | sed "s/https\:\/\/github\.com\/.*\///g" | sed "s/\.git//g")
 
-    if [[ -d "$PATH_TO_CORE/vendors/$vendor" ]]
+    if [[ -d "${PATH_TO_CORE}/vendors/${vendor}" ]]
     then
-      echo "Directory $PATH_TO_CORE/vendors/$vendor is exist"
+      echo "Directory ${PATH_TO_CORE}/vendors/${vendor} is exist"
 
-      cd "$PATH_TO_CORE/vendors/$vendor" && git clone ${repositories[$i]}
+      cd "${PATH_TO_CORE}/vendors/${vendor}" && git clone ${repositories[$i]}
     else
-      echo "Create directory: $PATH_TO_CORE/vendors/$vendor"
+      echo "Create directory: ${PATH_TO_CORE}/vendors/${vendor}"
       echo "Repository: ${repositories[$i]} is clonning"
 
-      mkdir "$PATH_TO_CORE/vendors/$vendor"
+      mkdir "${PATH_TO_CORE}/vendors/${vendor}"
 
-      cd "$PATH_TO_CORE/vendors/$vendor" && git clone ${repositories[$i]}
+      cd "${PATH_TO_CORE}/vendors/${vendor}" && git clone ${repositories[$i]}
     fi
-    i=$((i + 1))
+    i=$((i + 1)) # i++
   done
 }
 
-cloneVendors $@
+cloneVendors "$@"
diff --git a/bash/scripting/.bashrc b/bash/scripting/.bashrc
index 1d19945..c05fedd 100644
--- a/bash/scripting/.bashrc
+++ b/bash/scripting/.bashrc
@@ -9,11 +9,11 @@ fi
 source ~/git-completion.bash
 
 # Making SSH_AUTH_SOCK work between detaches in tmux/screen
-if [[ ! -z "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$HOME/agent_sock" ]]
+if [[ ! -z "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "${HOME}/agent_sock" ]]
 then
-   unlink "$HOME/agent_sock" 2>/dev/null
-   ln -s "$SSH_AUTH_SOCK" "$HOME/agent_sock"
-   export SSH_AUTH_SOCK="$HOME/agent_sock"
+   unlink "${HOME}/agent_sock" 2>/dev/null
+   ln -s "$SSH_AUTH_SOCK" "${HOME}/agent_sock"
+   export SSH_AUTH_SOCK="${HOME}/agent_sock"
 fi
 
 # User specific aliases and functions
diff --git a/bash/scripting/README.md b/bash/scripting/README.md
index 83d3b33..6f7dc4a 100755
--- a/bash/scripting/README.md
+++ b/bash/scripting/README.md
@@ -10,6 +10,7 @@
 * `variables.sh` - simple example with variables
 * `if_elif_else.sh` - `if/elif/else` example
 * `case_in_esac.sh` - `case/in/esac` example
+* `for_in.sh` - `for/in` example
 * `while.sh` - `while` example
 * `fast_diff.sh` - create `diff` and put it to some directory
 * `fast_diff_v2.sh` - create `diff` and add it to task through `Jira API`
diff --git a/bash/scripting/case_in_esac.sh b/bash/scripting/case_in_esac.sh
index 3ae0aa3..9d56408 100755
--- a/bash/scripting/case_in_esac.sh
+++ b/bash/scripting/case_in_esac.sh
@@ -5,18 +5,18 @@
 # ./case_in_esac.sh 1 2
 # Creating file 2
 
-if [[ $# -ne 2 ]]
+if [[ "$#" -ne 2 ]]
 then
   echo "You should specify exactly two arguments!"
 else
-  case $1 in
+  case "$1" in
   1)
-    echo "Creating file $2"
-    touch $2
+    echo "Creating file ${2}"
+    touch "$2"
   ;;
   2)
-    echo "Creating dir $2"
-    mkdir $2
+    echo "Creating dir ${2}"
+    mkdir "$2"
   ;;
   *)
     echo "Wrong value"
diff --git a/bash/scripting/clean_dist.sh b/bash/scripting/clean_dist.sh
index b404147..9d193e8 100755
--- a/bash/scripting/clean_dist.sh
+++ b/bash/scripting/clean_dist.sh
@@ -2,31 +2,30 @@
 
 # clean_dist.sh - clean dist for current theme
 
-
 cleanDist() {
-  theme=$1
+  theme="$1"
   DIST_NAME="_dist"
   REPO_NAME="terminalForCoder__WSD"
 
-  path_to_assets="$HOME/$REPO_NAME/bash/core/assets"
+  path_to_assets="${HOME}/${REPO_NAME}/bash/core/assets"
 
   # if $1 == "" clean all _dist in each theme
-  if [[ -z $theme ]]
+  if [[ -z "$theme" ]]
   then
     theme="assets"
-    path_to_dist="$path_to_assets/"
+    path_to_dist="$path_to_assets"
   else
-    path_to_dist="$path_to_assets/$theme"
+    path_to_dist="${path_to_assets}/${theme}"
   fi
 
-  if [[ -n $(find $path_to_dist -type d -name $DIST_NAME) ]]
+  if [[ -n $(find "$path_to_dist" -type d -name "$DIST_NAME") ]]
   then
     # do clear stuff
-    find $path_to_dist -type d -name $DIST_NAME | xargs -l rm -rfv
-    echo "Dist of $theme have already deleted: $path_to_dist"
+    find "$path_to_dist" -type d -name "$DIST_NAME" | xargs -l rm -rfv
+    echo "Dist of ${theme} have already deleted: ${path_to_dist}"
   else
-    echo "Can not find $DIST_NAME in $theme"
+    echo "Can not find ${DIST_NAME} in ${theme}"
   fi
 }
 
-cleanDist $@
+cleanDist "$@"
diff --git a/bash/scripting/fast_diff.sh b/bash/scripting/fast_diff.sh
index f78f4f9..98910d3 100755
--- a/bash/scripting/fast_diff.sh
+++ b/bash/scripting/fast_diff.sh
@@ -2,16 +2,16 @@
 
 # create diff for current branch and puts it in the file
 
-PATH_TO_DIFF_DIR="$HOME/diff/"
+PATH_TO_DIFF_DIR="${HOME}/diff/"
 FILE_PREFIX="diff-"
 FILE_EXTENTION=".diff"
 
-branch=$1
+branch="$1"
 
-if [[ -z $branch ]]
+if [[ -z "$branch" ]]
 then
   echo "Enter the branch name"
 else
-  path="$PATH_TO_DIFF_DIR$FILE_PREFIX$branch$FILE_EXTENTION"
+  path="${PATH_TO_DIFF_DIR}${FILE_PREFIX}${branch}${FILE_EXTENTION}"
   git diff origin/master origin/"$branch" > "$path"
-fi
\ No newline at end of file
+fi
diff --git a/bash/scripting/fast_diff_v2.sh b/bash/scripting/fast_diff_v2.sh
index 04726ae..535ff38 100755
--- a/bash/scripting/fast_diff_v2.sh
+++ b/bash/scripting/fast_diff_v2.sh
@@ -3,7 +3,7 @@
 if [ -z "$1" ]
 then
   echo "Please, specify an issue ID"
-  exit 1
+  exit 0
 fi
 
 issue_id="$1"
@@ -12,14 +12,14 @@ branch=$(git rev-parse --abbrev-ref HEAD)
 # Get the first line of git remote output and cut a path to repository
 repository=$(git remote -v | head -n1 | sed "s/^origin.*\/\(.*\)\.git\s(.*)/\1/")
 
-path_to_diff="$HOME/<path_to_diff_directory>$branch-$repository.diff"
+path_to_diff="${HOME}/<path_to_diff_directory>${branch}-${repository}.diff"
 
 diff_live () {
-  git diff "origin/live..master/$branch" > "$path_to_diff"
+  git diff "origin/live..master/${branch}" > "$path_to_diff"
 }
 
 attach_diff () {
-  curl -D- -u "<ipa_username>":"<ipa_password>" -X POST -H "X-Atlassian-Token: no-check" -F "file=@$path_to_diff;type=text/x-diff" "https://jira.<project_name>.com/rest/api/2/issue/$issue_id/attachments"
+  curl -D- -u "<ipa_username>":"<ipa_password>" -X POST -H "X-Atlassian-Token: no-check" -F "file=@${path_to_diff};type=text/x-diff" "https://jira.<project_name>.com/rest/api/2/issue/${issue_id}/attachments"
 }
 
 diff_live && attach_diff
diff --git a/bash/scripting/for_in.sh b/bash/scripting/for_in.sh
new file mode 100755
index 0000000..bbf1cd9
--- /dev/null
+++ b/bash/scripting/for_in.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+for i in 1 2 3 4 5
+do
+  file_name="file${i}.txt"
+  if [[ -e "$file_name" ]]
+  then
+    continue
+  fi
+  echo "Creating file ${file_name}"
+  touch "$file_name"
+done
diff --git a/bash/scripting/if_elif_else.sh b/bash/scripting/if_elif_else.sh
index a572b45..a263023 100755
--- a/bash/scripting/if_elif_else.sh
+++ b/bash/scripting/if_elif_else.sh
@@ -1,13 +1,13 @@
 #!/bin/bash
 
-if [[ -f $1 ]]
+if [[ -f "$1" ]]
 then
   echo "Removing file"
-  rm $1
-elif [[ -d $1 ]]
+  rm "$1"
+elif [[ -d "$1" ]]
 then
   echo "Removing dir"
-  rm -r $1
+  rm -r "$1"
 else
-  echo "Can't remove $1"
+  echo "Can't remove ${1}"
 fi
diff --git a/bash/scripting/up_repo.sh b/bash/scripting/up_repo.sh
index c92fb04..c1b04a0 100755
--- a/bash/scripting/up_repo.sh
+++ b/bash/scripting/up_repo.sh
@@ -9,12 +9,13 @@
 # get list of repositories
 findRepo() {
   REPO_NAME="terminalForCoder__WSD"
-  path_to_vendor_repo="$HOME/$REPO_NAME/bash/core/vendors/"
+  path_to_vendor_repo="${HOME}/${REPO_NAME}/bash/core/vendors/"
   # find all git repositories in $path_to_vendor_repo
   # filter by /.git
-  r=$(find $path_to_vendor_repo -name .git | xargs | sed "s/\\/.git//g")
+  r=$(find "$path_to_vendor_repo" -name .git | xargs | sed "s/\\/.git//g")
+
   # do check repositories stuff
-  checkBranch $r
+  checkBranch "$r"
 }
 
 # do check repositories stuff
@@ -22,25 +23,25 @@ checkBranch() {
   BRANCH="master"
 
   # $i is item in $r
-  for i in $@
+  for i in "$@"
   do
     # get current branch name
-    b=`cd $i && git branch | grep \*`
-    echo "repo: $i"
-    echo "current brunch: $b"
+    b=$(cd "$i" && git branch | grep \*)
+    echo "repo: ${i}"
+    echo "current brunch: ${b}"
 
     # check branch
-    if [[ $b != "* master" ]]
+    if [[ "$b" != "* master" ]]
     then
-      echo "!Error! $i is not on $BRANCH branch"
-      echo "Current branch is $b"
-      cd $i && git checkout $BRANCH && git branch && git pull origin $BRANCH
+      echo "!Error! ${i} is not on ${BRANCH} branch"
+      echo "Current branch is ${b}"
+      cd "$i" && git checkout "$BRANCH" && git branch && git pull origin "$BRANCH"
     else
       echo "Do pull stuff"
-      cd $i && git branch && git pull origin $BRANCH
+      cd "$i" && git branch && git pull origin "$BRANCH"
     fi
   done
   echo "Done. Congratulation, you win!"
 }
 
-findRepo $@
+findRepo "$@"
diff --git a/bash/scripting/variables.sh b/bash/scripting/variables.sh
index eed49d2..8744b16 100755
--- a/bash/scripting/variables.sh
+++ b/bash/scripting/variables.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 
-var1=$1
-var2=$2
+var1="$1"
+var2="$@"
 
-echo "Arguments are \$1=$var1 \$2=$var2"
+echo "Arguments are \$1=${var1} \$2=${var2}"
diff --git a/bash/scripting/while.sh b/bash/scripting/while.sh
index f6b7a9d..96004ac 100755
--- a/bash/scripting/while.sh
+++ b/bash/scripting/while.sh
@@ -1,13 +1,14 @@
-# while.sh
 #!/bin/bash
+# while.sh
 
 again="yes"
+
 while [ "$again" = "yes" ]
 do
   echo "Please enter a name:"
   read name
-  echo "The name you entered is $name"
+  echo "The name you entered is ${name}"
 
   echo "Do you wish to continue? (yes/no)"
   read again
-done
\ No newline at end of file
+done
